name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type (patch, minor, major, prerelease, none)'
        required: false
        default: 'patch'
      preid:
        description: 'Prerelease identifier (used only when bump=prerelease)'
        required: false
        default: 'rc'

permissions:
  contents: write
  packages: write
  id-token: write # required for npm provenance

jobs:
  auto-tag:
    name: Auto create tag (manual dispatch)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 18

      - name: Configure Git User
        run: |
          git config user.name "nick2bad4u"
          git config user.email "nick2bad4u@users.noreply.github.com"

      - name: Create tag from package.json version if missing
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          BUMP="${{ github.event.inputs.bump }}"
          PREID="${{ github.event.inputs.preid }}"
          echo "Requested bump: ${BUMP:-patch}"
          git fetch --tags --quiet
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: ${CURRENT_VERSION}"
          if [ -z "$BUMP" ]; then BUMP=patch; fi
          if [ "$BUMP" = "none" ]; then
            TAG="v${CURRENT_VERSION}"
            if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
              echo "Tag ${TAG} already exists. Nothing to do."
              exit 0
            fi
            echo "Creating tag ${TAG} without version bump"
            git tag -a "${TAG}" -m "Release ${TAG}"
            git push origin "${TAG}"
            echo "Tag ${TAG} pushed. New workflow run will publish."
            exit 0
          fi
          # Perform version bump
          if [ "$BUMP" = "prerelease" ]; then
            echo "Running prerelease bump with preid=${PREID}"
            npm version prerelease --preid "$PREID" -m "chore(release): v%s"
          else
            echo "Running npm version $BUMP"
            npm version "$BUMP" -m "chore(release): v%s"
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")
            TAG="v${NEW_VERSION}"
          echo "New version: ${NEW_VERSION} (tag ${TAG})"
          git push origin HEAD:main --follow-tags
          echo "Pushed commit and tag ${TAG}. A new workflow run will publish the release."

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 18
          cache: npm
          registry-url: https://registry.npmjs.org

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Type Check
        run: npm run typecheck

      - name: Tests & Coverage
        run: npm run test:coverage
        continue-on-error: true

      - name: Build
        run: npm run build

      - name: Verify package contents
        run: npm pack --dry-run

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --provenance --access public
        continue-on-error: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3
        with:
          generate_release_notes: true
          tag_name: ${{ github.ref_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

  publish-gpr:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: publish-npm

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0

      - name: Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: 18
          cache: npm
          registry-url: https://npm.pkg.github.com
          scope: '@${{ github.repository_owner }}'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Rewrite package name for GPR
        run: |
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json','utf8'));pkg.name='@'+process.env.OWNER+'/'+pkg.name;delete pkg.publishConfig;fs.writeFileSync('package.json',JSON.stringify(pkg,null,2));"
        env:
          OWNER: ${{ github.repository_owner }}

      - name: Publish to GPR
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm publish --provenance
        continue-on-error: true
